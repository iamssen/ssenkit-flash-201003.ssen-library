package ssen.core.net {	import mx.messaging.messages.AcknowledgeMessage;	import mx.messaging.messages.ErrorMessage;	import mx.messaging.messages.RemotingMessage;	import flash.events.AsyncErrorEvent;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.events.NetStatusEvent;	import flash.events.SecurityErrorEvent;	import flash.net.ObjectEncoding;	import flash.net.Responder;	import flash.net.registerClassAlias;	/**	 * AMFService	 * @author ssen	 */	public class AMFService extends EventDispatcher 	{		private static var _initialize : Boolean;		private var _url : String;		private var _id : String;		private var _destination : String;		private var _serviceClass : String;		private var _netConnection : AMFServiceConnection;				private static function initialize() : void		{			if (!_initialize) {				registerClassAlias("flex.messaging.messages.RemotingMessage", RemotingMessage);				registerClassAlias("flex.messaging.messages.AcknowledgeMessage", AcknowledgeMessage);				registerClassAlias("flex.messaging.messages.ErrorMessage", ErrorMessage);				//registerClassAlias("flex.messaging.io.ArrayCollection", ArrayCollection);				_initialize = true;			}		}		public function AMFService(url : String, id : String, destination : String, serviceClass : String)		{			initialize();						_url = url;			_id = id;			_destination = destination;			_serviceClass = serviceClass;						_netConnection = new AMFServiceConnection();			_netConnection.objectEncoding = ObjectEncoding.AMF3;			_netConnection.connect(_url);						_netConnection.addEventListener(AsyncErrorEvent.ASYNC_ERROR, event, false, 0, true);			_netConnection.addEventListener(IOErrorEvent.IO_ERROR, event, false, 0, true);			_netConnection.addEventListener(NetStatusEvent.NET_STATUS, event, false, 0, true);			_netConnection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, event, false, 0, true);		}		public function resourceKill() : void		{			_netConnection.removeEventListener(AsyncErrorEvent.ASYNC_ERROR, event);			_netConnection.removeEventListener(IOErrorEvent.IO_ERROR, event);			_netConnection.removeEventListener(NetStatusEvent.NET_STATUS, event);			_netConnection.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, event);			_netConnection.close();			_netConnection = null;		}		private function event(event : Event) : void		{			dispatchEvent(event);		}		private function methodCall(method : String, responder : Responder, parameters : Array = null) : void		{			if (parameters == null) parameters = [];						var remotingObject : RemotingMessage = new RemotingMessage();			remotingObject.source = _serviceClass;			remotingObject.operation = method;			remotingObject.body = parameters;			remotingObject.destination = _destination;			remotingObject.headers = {DSEndpoint:_id};			if (responder is AMFServiceResponder) AMFServiceResponder(responder).setNetConnection(_netConnection);			_netConnection.call(null, responder, remotingObject);		}		public function call(method : String, responder : Responder, ...parameters) : void		{			methodCall(method, responder, parameters);		}	}}